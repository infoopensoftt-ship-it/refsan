import React, { useState, useCallback } from 'react';
import { Button } from './ui/button';
import { Card, CardContent } from './ui/card';
import { Upload, X, File, Image } from 'lucide-react';
import { toast } from 'sonner';
import axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst FileUpload = ({ onFilesUploaded, maxFiles = 5 }) => {\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  const handleDragOver = useCallback((e) => {\n    e.preventDefault();\n    setDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e) => {\n    e.preventDefault();\n    setDragOver(false);\n  }, []);\n\n  const handleDrop = useCallback((e) => {\n    e.preventDefault();\n    setDragOver(false);\n    \n    const droppedFiles = Array.from(e.dataTransfer.files);\n    handleFileSelect(droppedFiles);\n  }, []);\n\n  const handleFileInput = (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    handleFileSelect(selectedFiles);\n  };\n\n  const handleFileSelect = (selectedFiles) => {\n    if (files.length + selectedFiles.length > maxFiles) {\n      toast.error(`Maksimum ${maxFiles} dosya yükleyebilirsiniz`);\n      return;\n    }\n\n    // File type validation\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'application/pdf', 'text/plain'];\n    const invalidFiles = selectedFiles.filter(file => !allowedTypes.includes(file.type));\n    \n    if (invalidFiles.length > 0) {\n      toast.error('Sadece resim, PDF ve metin dosyaları yükleyebilirsiniz');\n      return;\n    }\n\n    // File size validation (max 5MB per file)\n    const oversizedFiles = selectedFiles.filter(file => file.size > 5 * 1024 * 1024);\n    if (oversizedFiles.length > 0) {\n      toast.error('Dosya boyutu 5MB\\'dan küçük olmalıdır');\n      return;\n    }\n\n    const newFiles = selectedFiles.map(file => ({\n      file,\n      id: Math.random().toString(36).substr(2, 9),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      uploaded: false,\n      url: null\n    }));\n\n    setFiles(prev => [...prev, ...newFiles]);\n  };\n\n  const removeFile = (fileId) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n\n  const uploadFiles = async () => {\n    if (files.length === 0) {\n      toast.error('Yüklenecek dosya seçiniz');\n      return;\n    }\n\n    setUploading(true);\n    const uploadedFiles = [];\n\n    try {\n      for (const fileItem of files) {\n        if (fileItem.uploaded) {\n          uploadedFiles.push(fileItem);\n          continue;\n        }\n\n        const formData = new FormData();\n        formData.append('file', fileItem.file);\n\n        const response = await axios.post(`${API}/upload`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        const uploadedFile = {\n          ...fileItem,\n          uploaded: true,\n          url: response.data.file_url,\n          filename: response.data.filename\n        };\n        \n        uploadedFiles.push(uploadedFile);\n      }\n\n      setFiles(uploadedFiles);\n      \n      if (onFilesUploaded) {\n        onFilesUploaded(uploadedFiles.map(f => ({\n          name: f.name,\n          url: f.url,\n          filename: f.filename,\n          type: f.type\n        })));\n      }\n\n      toast.success('Dosyalar başarıyla yüklendi');\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast.error('Dosya yükleme hatası');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const getFileIcon = (type) => {\n    if (type.startsWith('image/')) {\n      return <Image className=\"w-4 h-4\" />;\n    }\n    return <File className=\"w-4 h-4\" />;\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className={`border-2 border-dashed transition-colors ${\n        dragOver \n          ? 'border-blue-400 bg-blue-50' \n          : 'border-gray-300 hover:border-gray-400'\n      }`}>\n        <CardContent \n          className=\"p-6 text-center\"\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n        >\n          <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-lg font-medium text-gray-700 mb-2\">\n            Dosyaları buraya sürükleyin veya tıklayın\n          </p>\n          <p className=\"text-sm text-gray-500 mb-4\">\n            Resim, PDF, TXT dosyaları (maks. 5MB, {maxFiles} dosyaya kadar)\n          </p>\n          <input\n            type=\"file\"\n            multiple\n            accept=\"image/*,.pdf,.txt\"\n            onChange={handleFileInput}\n            className=\"hidden\"\n            id=\"file-input\"\n          />\n          <Button \n            type=\"button\"\n            variant=\"outline\" \n            onClick={() => document.getElementById('file-input').click()}\n            data-testid=\"file-upload-btn\"\n          >\n            Dosya Seç\n          </Button>\n        </CardContent>\n      </Card>\n\n      {files.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-gray-700\">Seçilen Dosyalar:</h4>\n          \n          {files.map((fileItem) => (\n            <div key={fileItem.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                {getFileIcon(fileItem.type)}\n                <div>\n                  <p className=\"text-sm font-medium text-gray-700\">{fileItem.name}</p>\n                  <p className=\"text-xs text-gray-500\">{formatFileSize(fileItem.size)}</p>\n                </div>\n                {fileItem.uploaded && (\n                  <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded\">\n                    Yüklendi\n                  </span>\n                )}\n              </div>\n              \n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeFile(fileItem.id)}\n                className=\"text-red-600 hover:text-red-800\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          ))}\n          \n          <Button\n            type=\"button\"\n            onClick={uploadFiles}\n            disabled={uploading || files.every(f => f.uploaded)}\n            className=\"w-full\"\n            data-testid=\"upload-files-btn\"\n          >\n            {uploading ? 'Yükleniyor...' : 'Dosyaları Yükle'}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;"